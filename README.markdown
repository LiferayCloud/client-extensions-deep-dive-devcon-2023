# Client Extension Deep Dive Workshop Script

## Before Workshop

_Note that this setup might take as long as 15 minutes so please run
these steps before the workshop!_

_If you'd like help with these commands you can reach out on this Liferay community Slack channel: [#devcon-2023-client-extensions-101-workshop](https://liferay-community.slack.com/archives/C058EQJ0MFG)_

1. Download [client-extensions-deep-dive-devcon-2023.tar.gz](https://drive.google.com/uc?id=1_WnztbRVFcmo94F9zs4pHWi3_uEF73GU&export=download) and unzip

   **OR**

   Clone repo:

   ```bash
   git clone https://github.com/LiferayCloud/client-extensions-deep-dive-devcon-2023.git
   ```

1. Change into workspace

   ```bash
   cd client-extensions-deep-dive-devcon-2023
   ```

1. Initialize the bundle _(this downloads dependencies so it might take a while)_

   ```bash
   ./gradlew initBundle
   ```

1. Start DXP
   1. Linux/Mac:

      ```bash
      ./bundles/tomcat-9.0.73/bin/catalina.sh run
      ```

   1. Windows:

      ```bash
      .\bundles\tomcat-9.0.73\bin\catalina.bat run
      ```

1. Liferay should pop up automatically on http://localhost:8080

1. Log in to liferay with user `test@liferay.com` and password `test`

   _Note - if the page is unresponsive you might have to refresh the page once before logging in (known issue)._

1. Change the password to something you can remember

1. Build all projects

   ```bash
   ./gradlew build
   ```

## Workshop Exercise

### Introduction

> **What are Client Extensions again?**<br/><br/>Client extensions are a generic mechanism which enables running customizations outside Liferay.<br/><br/>They are defined in a `client-extension.yaml` file where we specify their properties.<br/><br/>When they communicate with DXP or with other Client Extensions they do so securely using OAuth2 with DXP as the Authrization Server.

In this workspace we will use Client Extensions to build the following use case:

- A ticket management system

- Requirements:
   - Defines a Customized Data Schema
   - Applies the Corporate brand and style
   - Provides a Customized User Application
   - Implements Algorithmic Documentation Referral

In the end it should look like the following image:
![Screenshot](./application-screenshot.png)

## Defining a Customized Data Schema

Our business domain is **Ticket** management and DXP doesn't have the concept of a Ticket. We would have used Service Builder but now we want to use the declarative persistence feature of DXP to define them, [Objects](https://learn.liferay.com/web/guest/w/dxp/building-applications/objects).

Our **Ticket** domain model will be defined starting by creating some [Picklists](https://learn.liferay.com/web/guest/w/dxp/building-applications/objects/picklists/using-picklists#creating-a-picklist). A picklist is a predetermined list of values a user can select, like a vocabulary. We can use Picklists when modelling Objects where some attributes need to be constrained to specific values. For instance; status, priority, region and so on.

The Picklists we need are already defined in the project `client-extensions/list-type-batch`.

This project's `client-extension.yaml` declares a client extension of `type: batch` which is used to import DXP resources without requiring us to write any code. Resources are exported from DXP's Import/Export Center in the `JSONT` format required for client extensions and placed in the project's `batch` directory. Batch engine data files are not generated by hand but are meant to be editiable by humans.

Execute the following commmand from the root of the workspace to deploy the picklists:
```bash
./gradlew :client-extensions:list-type-batch:deploy
```
Watch the tomcat logs to see that the client extension deployed.

Now we can deploy our **Ticket** _Object_ which was already defined in the project `client-extensions/ticket-batch`.

In similar fashion to the previous one, this project's `client-extension.yaml` declares a client extension of `type: batch` as well. It's `batch` directory contains the batch engine data file where the **Ticket** _object_ is defined.

Execute the following commmand from the root of the workspace to deploy the Ticket object:
```bash
./gradlew :client-extensions:ticket-batch:deploy
```
Watch the tomcat logs to see that the client extension deployed.

One very important feature of using Objects to define our domain model is that headless APIs are automatically provided for you without any additional effort.

You can view these APIs in DXP's built in headless API browser by following this link: [Tickets Headless API](http://localhost:8080/o/api?endpoint=http://localhost:8080/o/c/tickets/openapi.json)

Please view the endpoints of the headless API now.

We created the first ticket by hand, but in the scenario where you have pre-existing data, you can import it using batch (several of these operations do need to be performed in order)

- deploy some pre-existing tickets

```bash
./gradlew :client-extensions:ticket-entry-batch:deploy
```

- show the ticket entries

## Front-end

### Discuss styling in general

```bash
./gradlew :client-extensions:tickets-theme-css:deploy
```

- add tickets-theme-css to the home page
- discuss scope of configuration
  ![Apply Theme to All Pages](./apply-theme.gif)

### Adding a Custom Front End
- some CX are activated during deployment and others registered during deployment. These need to be configured before use.
- show the project
- explain that this is just a Javascript project with a package.json that has a `.scripts.build` instruction
   $pkgman install
   $pkgman run build
   in this workspace we used `yarn`
- customElement type client extension is based on the HTML 5 Web Components. We have documentation about this on Liferay learn.
- the assemble block,
   we had the assemble block in the previous client extension yaml but lets a minute to discuss.
   Workspace build knows how to call your frontend build, but it doesn't know what to include in the LUFFA
   the asseble block allows you to declare what resources need to be included in the LUFFA
      [assemble ref]()

```bash
./gradlew :client-extensions:current-tickets-custom-element:deploy
```

- remove main Grid section and add custom element in place of it
  ![Edit Home Page to Add Custom Element](./edit-home-page.gif)
- show the app, explain here it's using the ticket headless API



## Business Logic

- talk about the requirement for the documentation referral feature
- boilerplate objectAction
- show the route
- summarize OAuth2

- show modification to the object definition (active: true)
- deploy idempotency

```bash
./gradlew :client-extensions:ticket-batch:deploy
```

- in a separate terminal run (boiler plate logic)

```bash
(cd client-extensions/ticket-spring-boot/ && ../../gradlew deploy bootRun)
```

- demonstrate API POST with curl, wget returns 401

```bash
curl -v -X POST http://localhost:58081/ticket/object/action/documentation/referral
```

- use the ticket app to add a new ticket
- show that the spring boot route is executed

- modify spring boot app with new custom ticket document referral logic

- terminate the spring boot process

```bash
<ctrl-c>
(cd client-extensions/ticket-spring-boot/ && ../../gradlew deploy bootRun)
```

- create a new ticket
- demonstrate the ticket changes (links and queued)

