# Client Extension Deep Dive Workshop Script

## Before Workshop

<em>Note that this setup might take as long as 15 minutes so please run 
these steps before the workshop!</em>

<em>If you'd like help with these commands you can reach out on this Liferay community Slack channel: [#devcon-2023-client-extensions-101-workshop](https://liferay-community.slack.com/archives/C058EQJ0MFG)</em>

1. Download [deep-dive-workspace.zip](https://drive.google.com/file/d/1Ni5an-vf4tPBXM6nsgJjxTyz_Vs1DMYt/view) and unzip

   **OR**

   Clone repo:

   `git clone https://github.com/LiferayCloud/client-extensions-deep-dive-devcon-2023.git`

1. Change into workspace

   `cd client-extensions-deep-dive-devcon-2023`

1. Setup the bundle

   `./gradlew initBundle`

1. Start DXP
   1. Linux/Mac:

      `./bundles/tomcat-9.0.73/bin/catalina.sh run`

   1. Windows:

      `.\bundles\tomcat-9.0.73\bin\catalina.bat run`

1. Liferay should pop up automatically on http://localhost:8080

1. Log in to liferay with user `test@liferay.com` and password `test`

   <em>Note - if the page is unresponsive you might have to refresh the page once before logging in (known issue).</em>

1. Change the password to something you can remember

1. Build all projects

   `./gradlew build`

<!--
### Sections

- Declarative Persistence
- Front-end
- Business Logic
-->

## Workshop Exercise

### Introduction

1. Salt of client extensions: a generic mechanism to enable running customizations to run outside LIferay with secure communications, built around a new configuration file: client-extension.yaml
1. Use case
   - Ticket management system
   - Requirements:
      - Custom UI
      - Corporate style
      - Algorithmic documentation referral

![Screenshot](./application-screenshot.png)

## Declarative Persistence

Our business domain is Ticket management and DXP doesn't have the concept of tickets. We would have used Service Builder but now we want to use declarative persistence, the object framework.

### Picklist

The ticket domain model has some attributes which are constrained to a list of possible values: status, priority, region and so on.

![Ticket Attributes](./ticket-attributes.png)

- Show pick lists control panel (empty)
   [link](http://localhost:8080/group/guest/~/control_panel/manage?p_p_id=com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet&p_p_lifecycle=0&p_p_state=maximized)

- Show the picklist project
- Describe the batch resource
- Batch resources are not generated by humans but ARE editable by them
- Explain that we modelled the pick lists in a DXP instance and exported previously into the required format for a client extension
- Execute this commmand from the root of the project to deploy the picklists:
```bash
./gradlew :client-extensions:list-type-batch:deploy
```
- Watch the tomcat logs to see that the client extension deployed

- Show populated pick lists
      [link](http://localhost:8080/group/guest/~/control_panel/manage?p_p_id=com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet&p_p_lifecycle=0&p_p_state=maximized)

### discuss object definitions

Now that we've modelled the necessary ticket domain attributes, we can model the ticket

- deploy object definition with object action `"active": false`

```bash
./gradlew :client-extensions:ticket-batch:deploy
```

- show the new ticket object
   [link]()
- Show the CRUD UI
- create an entry
- describe the ticket headless API
   [link](http://localhost:8080/o/api?endpoint=http://localhost:8080/o/c/tickets/openapi.json)

### discuss object entries (tickets)

We created the first ticket by hand, but in the scenario where you have preexisting data, you can import it using batch (several of these operations do need to be performed in order)

- deploy some pre-existing tickets

```bash
./gradlew :client-extensions:ticket-entry-batch:deploy
```

- show the ticket entries

## Front-end

### Discuss styling in general

```bash
./gradlew :client-extensions:tickets-theme-css:deploy
```

- add tickets-theme-css to the home page
- discuss scope of configuration
  ![Apply Theme to All Pages](./apply-theme.gif)

### Adding a Custom Front End
- some CX are activated during deployment and others registered during deployment. These need to be configured before use.
- show the project
- explain that this is just a Javascript project with a package.json that has a `.scripts.build` instruction
   $pkgman install
   $pkgman run build
   in this workspace we used `yarn`
- customElement type client extension is based on the HTML 5 Web Components. We have documentation about this on Liferay learn.
- the assemble block,
   we had the assemble block in the previous client extension yaml but lets a minute to discuss.
   Workspace build knows how to call your frontend build, but it doesn't know what to include in the LUFFA
   the asseble block allows you to declare what resources need to be included in the LUFFA
      [assemble ref]()

```bash
./gradlew :client-extensions:current-tickets-custom-element:deploy
```

- remove main Grid section and add custom element in place of it
  ![Edit Home Page to Add Custom Element](./edit-home-page.gif)
- show the app, explain here it's using the ticket headless API



## Business Logic

- talk about the requirement for the documentation referral feature
- boilerplate objectAction
- show the route
- summarize OAuth2

- show modification to the object definition (active: true)
- deploy idempotency

```bash
./gradlew :client-extensions:ticket-batch:deploy
```

- in a separate terminal run (boiler plate logic)

```bash
(cd client-extensions/ticket-spring-boot/ && ../../gradlew deploy bootRun)
```

- demonstrate API POST with curl, wget returns 401

```bash
curl -v -X POST http://localhost:58081/ticket/object/action/documentation/referral
```

- use the ticket app to add a new ticket
- show that the spring boot route is executed

- modify spring boot app with new custom ticket document referral logic

- terminate the spring boot process

```bash
<ctrl-c>
(cd client-extensions/ticket-spring-boot/ && ../../gradlew deploy bootRun)
```

- create a new ticket
- demonstrate the ticket changes (links and queued)

## FAQ
